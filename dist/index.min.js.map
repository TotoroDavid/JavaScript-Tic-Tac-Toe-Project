{"version":3,"sources":["index.js"],"names":["origBoard","huPlayer","aiPlayer","winCombos","cells","document","querySelectorAll","startGame","querySelector","style","display","Array","from","keys","i","length","innerText","removeProperty","turnClick","square","target","id","turn","checkTie","bestSpot","squareId","player","getElementById","gameWon","checkWin","board","plays","e","reduce","concat","a","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_step$value","_slicedToArray","value","index","every","elem","indexOf","err","gameOver","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","backgroundColor","win","removeEventListener","declareWinner","who","emptySquares","filter","s","minimax","newBoard","availSpots","score","moves","move","result","push","bestScore","bestMove"],"mappings":"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","file":"index.min.js","sourcesContent":["var origBoard;\nconst huPlayer = 'O';\nconst aiPlayer = 'X';\nconst winCombos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [6, 4, 2]\n]\n\nconst cells = document.querySelectorAll('.cell');\nstartGame();\n\nfunction startGame() {\n    document.querySelector(\".endgame\").style.display = \"none\";\n    origBoard = Array.from(Array(9).keys());\n    for (var i = 0; i < cells.length; i++) {\n        cells[i].innerText = '';\n        cells[i].style.removeProperty('background-color');\n        cells[i].addEventListener('click', turnClick, false);\n    }\n}\n\nfunction turnClick(square) {\n    if (typeof origBoard[square.target.id] == 'number') {\n        turn(square.target.id, huPlayer)\n        if (!checkWin(origBoard, huPlayer) && !checkTie()) turn(bestSpot(), aiPlayer);\n    }\n}\n\nfunction turn(squareId, player) {\n    origBoard[squareId] = player;\n    document.getElementById(squareId).innerText = player;\n    let gameWon = checkWin(origBoard, player)\n    if (gameWon) gameOver(gameWon)\n}\n\nfunction checkWin(board, player) {\n    let plays = board.reduce((a, e, i) =>\n        (e === player) ? a.concat(i) : a, []);\n    let gameWon = null;\n    for (let [index, win] of winCombos.entries()) {\n        if (win.every(elem => plays.indexOf(elem) > -1)) {\n            gameWon = { index: index, player: player };\n            break;\n        }\n    }\n    return gameWon;\n}\n\nfunction gameOver(gameWon) {\n    for (let index of winCombos[gameWon.index]) {\n        document.getElementById(index).style.backgroundColor =\n            gameWon.player == huPlayer ? \"blue\" : \"red\";\n    }\n    for (var i = 0; i < cells.length; i++) {\n        cells[i].removeEventListener('click', turnClick, false);\n    }\n    declareWinner(gameWon.player == huPlayer ? \"You win!\" : \"You lose.\");\n}\n\nfunction declareWinner(who) {\n    document.querySelector(\".endgame\").style.display = \"block\";\n    document.querySelector(\".endgame .text\").innerText = who;\n}\n\nfunction emptySquares() {\n    return origBoard.filter(s => typeof s == 'number');\n}\n\nfunction bestSpot() {\n    return minimax(origBoard, aiPlayer).index;\n}\n\nfunction checkTie() {\n    if (emptySquares().length == 0) {\n        for (var i = 0; i < cells.length; i++) {\n            cells[i].style.backgroundColor = \"green\";\n            cells[i].removeEventListener('click', turnClick, false);\n        }\n        declareWinner(\"Tie Game!\")\n        return true;\n    }\n    return false;\n}\n\nfunction minimax(newBoard, player) {\n    var availSpots = emptySquares();\n\n    if (checkWin(newBoard, huPlayer)) {\n        return { score: -10 };\n    } else if (checkWin(newBoard, aiPlayer)) {\n        return { score: 10 };\n    } else if (availSpots.length === 0) {\n        return { score: 0 };\n    }\n    var moves = [];\n    for (var i = 0; i < availSpots.length; i++) {\n        var move = {};\n        move.index = newBoard[availSpots[i]];\n        newBoard[availSpots[i]] = player;\n\n        if (player == aiPlayer) {\n            var result = minimax(newBoard, huPlayer);\n            move.score = result.score;\n        } else {\n            var result = minimax(newBoard, aiPlayer);\n            move.score = result.score;\n        }\n\n        newBoard[availSpots[i]] = move.index;\n\n        moves.push(move);\n    }\n\n    var bestMove;\n    if (player === aiPlayer) {\n        var bestScore = -10000;\n        for (var i = 0; i < moves.length; i++) {\n            if (moves[i].score > bestScore) {\n                bestScore = moves[i].score;\n                bestMove = i;\n            }\n        }\n    } else {\n        var bestScore = 10000;\n        for (var i = 0; i < moves.length; i++) {\n            if (moves[i].score < bestScore) {\n                bestScore = moves[i].score;\n                bestMove = i;\n            }\n        }\n    }\n\n    return moves[bestMove];\n}"]}